cleandata_sg_lvn <- tpess_sg_data %>%
select(Age, starts_with("docs"), starts_with("gad"), starts_with("phq"), starts_with("smpd"), starts_with("smsp"), starts_with("tp_")) %>%
select(-docs_sum, -gad_sum, -phq_sum, -smpd_mean, -smsp_mean) %>%
mutate(docs_con = docs1 + docs2 + docs3 + docs4 + docs5,
docs_res = docs6 + docs7 + docs8 + docs9 + docs10,
docs_ut = docs11 + docs12 + docs13 + docs14 + docs15,
docs_sym = docs16 + docs17 + docs18 + docs19 + docs20,
.keep = "unused",
.after = smsp10)
cleandata_sg_lvn %>% write.csv("./data/lvnetwork/networkdata_sg_lvn.csv", row.names = FALSE)
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
# importing clean data for network estimation
networkdata_lvn <- read.csv("./data/lvnetwork/networkdata_sg_lnm.csv") %>%
select(-Age)
# importing clean data for network estimation
networkdata_lvn <- read.csv("./data/lvnetwork/networkdata_sg_lvn.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
View(networkdata_lvn)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
View(Lambda)
networkdata_lvn
View(networkdata_lvn)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(1, 50, 41)
View(Lambda)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
Lambda[41:50,1] <- 1
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
Lambda[41:50, 1] <- 1
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
View(Lambda)
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
Lambda[1,1] <- 0
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda[1:40]) <- 1
?diag
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
View(Lambda)
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
Lambda[41:50,41] <- 1
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_lvn)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
View(nodelabels)
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_lvn)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
# importing clean data for network estimation
networkdata_lvn <- read.csv("./data/lvnetwork/networkdata_sg_lvn.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
Lambda[41:50,41] <- 1
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_lvn)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
View(nodelabels)
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
# importing clean data for network estimation
networkdata_lvn <- read.csv("./data/lvnetwork/networkdata_sg_lvn.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
Lambda[41:50,41] <- 1
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_lvn)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
View(nodelabels)
latentlabels <- nodelabels[1:40,1]
latentlabels
latentlabels <- nodelabels[1:40,2]
latentlabels <- nodelabels[1:40,2] + "T"
latentlabels <- nodelabels[1:40,2] %>%
paste("T")
latentlabels
latentlabels <- nodelabels[1:40,2] %>%
append("T")
latentlabels
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
vars = nodelabels$label, latents = latentlabels,
identification = "variance", latent = "ggm")
library(psychonetrics)
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
vars = nodelabels$label, latents = latentlabels,
identification = "variance", latent = "ggm")
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
library(psychonetrics)
# importing clean data for network estimation
networkdata_lvn <- read.csv("./data/lvnetwork/networkdata_sg_lvn.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
##################################################################
##              Latent variable network estimation              ##
##################################################################
# creating lambda matrix
Lambda <- matrix(0, 50, 41)
diag(Lambda) <- 1
Lambda[41:50,41] <- 1
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_lvn)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
latentlabels <- nodelabels[1:40,2] %>%
append("T")
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
vars = nodelabels$label, latents = latentlabels,
identification = "variance", latent = "ggm")
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
identification = "variance", latent = "ggm")
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
vars = nodelabels$label,
identification = "variance", latent = "ggm")
?lvm
nodelabels$label
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
identification = "variance", latent = "ggm")
install.packages("GPArotation")
# estimating network
network_lvn <- lvm(networkdata_lvn, lambda = Lambda,
identification = "variance", latent = "ggm")
network_lvn <- network_lvn %>% runmodel
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
library(lavaan)
# importing factor scores
tpess_factorscores <- read_sav("./data/fsnetwork/fscores.sav") %>%
select(1)
names(tpess_factorscores) <- "tpess_fs"
# importing clean data for network estimation
networkdata_sg_fs <- read.csv("./data/exploratory/networkdata_allitems_sg.csv")
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
##################################################################
##          Computing factor scores for DOCS subscales          ##
##################################################################
# subsetting DOCS data
docs_data <- networkdata_sg_fs %>%
select(starts_with("docs"))
# specifying and estimating CFA model
docs_structure <-"
docs_con =~ docs1 + docs2 + docs3 + docs4 + docs5
docs_res =~ docs6 + docs7 + docs8 + docs9 + docs10
docs_ut =~ docs11 + docs12 + docs13 + docs14 + docs15
docs_sym =~ docs16 + docs17 + docs18 + docs19 + docs20
# Second-order factor
docs_general =~ docs_con + docs_res + docs_ut + docs_sym
"
docs_model <- lavaan::cfa(docs_structure, docs_data, missing = "ml")
summary(docs_model, fit.measures = TRUE)
# extracting factor scores
docs_factorscores <- as.data.frame(lavaan::lavPredict(docs_model, method = "regression")) %>%
select(-docs_general)
# merging factor scores with rest of the data
networkdata_sg_fs <- networkdata_sg_fs %>%
select(-tpess, -starts_with("docs")) %>%
cbind(docs_factorscores) %>%
cbind(tpess_factorscores)
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_sg_fs)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
nodelabels[nodelabels$variablename == "tpess_fs",2] <- "T"
nodelabels[nodelabels$variablename == "tpess_fs",3] <- "TPESS factor score"
# estimating network
network_fs <- estimateNetwork(networkdata_sg_fs,
default = "EBICglasso",
corMethod = "spearman",
labels = nodelabels$label,
missing = "pairwise",
sampleSize = "pairwise_average",
tuning = 0.5)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_sg_fs,"gad"),
"PHQ-9" = def_legend(networkdata_sg_fs,"phq"),
"SMPD" = def_legend(networkdata_sg_fs,"smpd"),
"SMSAD" = def_legend(networkdata_sg_fs,"smsp"),
"DOCS" = def_legend(networkdata_sg_fs,"docs"),
"TPESS" = c(which(colnames(networkdata_sg_fs) == "tpess_fs")))
# importing plot layout from original exploratory network for ease of comparison
plotlayout <- as.matrix(read.csv("./data/confirmatory/plotlayout.csv"))
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.01,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
par(mar = c(1,1,1,1))
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
dev.off
dev.off()
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
View(group_subscale)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
par(mar = c(0.1, 0.1, 0.1, 0.1))
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
nodelabels$label
source("~/Github/TPESS-Network-S1/scripts/analysis_cfmnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend = FALSE
legend.cex = 0.95,
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend = FALSE,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "expnetwork", filetype = "png", width = 20, height = 20)
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
Y
"Y"
tinytex::install_tinytex()
y
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
View(nodelabels)
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(nodenames[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(communities_labels[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(communities_labels[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
communities_clean <- gsub('[[:digit:]]+', '', communities_labels)
communities_clean[57:66] <- x
communities_clean
install.packages("networktools")
install.packages("networktools")
