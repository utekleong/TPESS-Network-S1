networkdata_us <- read.csv("./data/confirmatory/networkdata_us.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
## docs_con
networkdata_reliability_us %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
networkdata_reliability_us %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
networkdata_reliability_us %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
networkdata_reliability_us %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
#calculating reliability for tpess (raw_alpha of output)
networkdata_reliability_us %>%
select(starts_with("tpess")) %>%
psych::alpha()
##################################################################
##                    Sample characteristics                    ##
##################################################################
# mean age
mean(data_us$Age, na.rm = TRUE) %>%
round(digits = 2)
#################################################################
##               Confirmatory network estimation               ##
#################################################################
# pulling adjacency matrix from exploratory network
adjmatrix <- as.matrix(read.csv("./data/confirmatory/adjmatrix.csv", row.names = 1))
# obtaining average pairwise sample size for US sample
noNA <- !is.na(networkdata_us)
noNAmat <- t(noNA) %*% noNA
n_pairwise <- mean(noNAmat[lower.tri(noNAmat)])
# fitting confirmatory network model with psychonetrics
# since exploratory model used spearman, should use spearman in confirmatory model for consistency (supply covs and nobs arguments instead of data)
cfmnetwork <- ggm(covs = cor(networkdata_us, use = "pairwise.complete.obs", method = "spearman"),
nobs = n_pairwise,
omega = adjmatrix)
results_cfmnetwork <- cfmnetwork %>% runmodel() #takes a long time!
#################################################################
##                Plotting confirmatory network                ##
#################################################################
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_us,"gad"),
"PHQ-9" = def_legend(networkdata_us,"phq"),
"SMPD" = def_legend(networkdata_us,"smpd"),
"SMSAD" = def_legend(networkdata_us,"smsp"),
"DOCS" = def_legend(networkdata_us,"docs"),
"TPESS" = c(which(colnames(networkdata_us) == "tpess")))
# importing nodelabels
nodelabels <- read.csv("./data/nodelabels.csv")
# pulling plot layout of exploratory network
plotlayout <- as.matrix(read.csv("./data/confirmatory/plotlayout.csv"))
#plotting confirmatory network
plot_us <- qgraph(getmatrix(results_cfmnetwork, "omega", threshold = TRUE, alpha = 0.01),
groups = group_subscale,
layout = plotlayout,
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "study1_cfmnetwork", filetype = "jpeg", width = 20, height = 20,
theme = "colorblind")
#plotting confirmatory network
plot_us <- qgraph(getmatrix(results_cfmnetwork, "omega", threshold = TRUE, alpha = 0.05),
groups = group_subscale,
layout = plotlayout,
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "study1_cfmnetwork", filetype = "jpeg", width = 20, height = 20,
theme = "colorblind")
results_cfmnetwork %>% fit
source("~/GitHub/TPESS-Network-S1/scripts/analysis_cfmnet.R")
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
cfmnetwork_ciplot
significance <- case_when(
network_us_ciplot$data$p < 0.0001 ~ "p < .0001",
network_us_ciplot$data$p < 0.001 ~ "p < .001",
network_us_ciplot$data$p < 0.01 ~ "p < .01",
network_us_ciplot$data$p < 0.05 ~ "p < .05",
network_us_ciplot$data$p > 0.05 ~ "p > .05"
)
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
cfmnetwork_edgelist_sig
View(nodelabels)
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
cfmnetwork_edgelist_sig
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
cfmnetwork_edgelist_sig
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
cfmnetwork_edgelist_sig
View(nodelabels)
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig$weight <- round(cfmnetwork_edgelist_sig$weight, digits = 2)
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig
cfmnetwork_edgelist_sig_table <- cfmnetwork_edgelist_sig %>%
flextable() %>%
set_header_labels(label = "Node Label",
variable_description_short = "Description",
weight = "Edge Weight") %>%
autofit()
cfmnetwork_edgelist_sig_table
print(cfmnetwork_edgelist_sig_table, preview = "docx")
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
# importing clean data for reliability analyses
networkdata_reliability_sg <- read.csv("./data/exploratory/networkdata_reliability_sg.csv")
# importing clean data for sample characteristics and network estimation
data_sg <- read.csv("./data/exploratory/networkdata_sg.csv")
networkdata_sg <- read.csv("./data/exploratory/networkdata_sg.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
## docs_con
networkdata_reliability_sg %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
networkdata_reliability_sg %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
networkdata_reliability_sg %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
networkdata_reliability_sg %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
#calculating reliability for tpess (raw_alpha of output)
networkdata_reliability_sg %>%
select(starts_with("tpess")) %>%
psych::alpha()
##################################################################
##                    Sample characteristics                    ##
##################################################################
# mean age
mean(data_sg$Age, na.rm = TRUE) %>%
round(digits = 2)
##################################################################
##                Exploratory network estimation                ##
##################################################################
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_sg)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
write.csv(nodelabels, file = "./data/nodelabels.csv", row.names = FALSE)
# estimating network
network_sg <- estimateNetwork(networkdata_sg,
default = "EBICglasso",
corMethod = "spearman",
labels = nodelabels$label,
missing = "pairwise",
sampleSize = "pairwise_average",
tuning = 0.5)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_sg,"gad"),
"PHQ-9" = def_legend(networkdata_sg,"phq"),
"SMPD" = def_legend(networkdata_sg,"smpd"),
"SMSAD" = def_legend(networkdata_sg,"smsp"),
"DOCS" = def_legend(networkdata_sg,"docs"),
"TPESS" = c(which(colnames(networkdata_sg) == "tpess")))
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "study1_expnetwork", filetype = "jpeg", width = 20, height = 20)
# extracting adjacency matrix from the exploratory network to be used in confirmatory network analysis
adjmatrix <- 1*(network_sg$graph !=0)
write.csv(adjmatrix, file = "./data/confirmatory/adjmatrix.csv", row.names = TRUE)
# extracting plot layout from the exploratory network to be used in confirmatory network analysis
plotlayout <- plot_sg$layout
write.csv(plotlayout, file = "./data/confirmatory/plotlayout.csv", row.names = FALSE)
##################################################################
##                      Edge weight tables                      ##
##################################################################
# Edge Weight Table (Full)
edgeweight_full <- data.frame(network_sg$graph) %>%
round(digits = 2)
row.names(edgeweight_full) <- nodelabels$label
names(edgeweight_full) <- nodelabels$label
write.csv(edgeweight_full, file = "edgeweight.csv")
# Edge Weight Table (TPESS-Symptoms only)
edgeweight_tpess <- data.frame(network_sg$graph[,41]) %>%
round(digits = 2) %>%
rownames_to_column()
names(edgeweight_tpess) <- c("variablename", "weight")
edgeweight_tpess <- left_join(edgeweight_tpess, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3") %>%
arrange(desc(weight))
edgeweight_tpess_table <- edgeweight_tpess %>%
flextable() %>%
set_header_labels(label = "Node Label",
variable_description_short = "Description",
weight = "Edge Weight") %>%
autofit()
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
library(psychonetrics)
# importing clean data for reliability analyses
networkdata_reliability_us <- read.csv("./data/confirmatory/networkdata_reliability_us.csv")
# importing clean data for sample characteristics and network estimation
data_us <- read.csv("./data/confirmatory/networkdata_us.csv")
networkdata_us <- read.csv("./data/confirmatory/networkdata_us.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
## docs_con
networkdata_reliability_us %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
networkdata_reliability_us %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
networkdata_reliability_us %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
networkdata_reliability_us %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
#calculating reliability for tpess (raw_alpha of output)
networkdata_reliability_us %>%
select(starts_with("tpess")) %>%
psych::alpha()
##################################################################
##                    Sample characteristics                    ##
##################################################################
# mean age
mean(data_us$Age, na.rm = TRUE) %>%
round(digits = 2)
#################################################################
##               Confirmatory network estimation               ##
#################################################################
# pulling adjacency matrix from exploratory network
adjmatrix <- as.matrix(read.csv("./data/confirmatory/adjmatrix.csv", row.names = 1))
# obtaining average pairwise sample size for US sample
noNA <- !is.na(networkdata_us)
noNAmat <- t(noNA) %*% noNA
n_pairwise <- mean(noNAmat[lower.tri(noNAmat)])
# fitting confirmatory network model with psychonetrics
# since exploratory model used spearman, should use spearman in confirmatory model for consistency (supply covs and nobs arguments instead of data)
cfmnetwork <- ggm(covs = cor(networkdata_us, use = "pairwise.complete.obs", method = "spearman"),
nobs = n_pairwise,
omega = adjmatrix)
results_cfmnetwork <- cfmnetwork %>% runmodel() #takes a long time!
# obtaining model fit indices
results_cfmnetwork %>% fit %>%
filter(Measure == "df" |Measure == "chisq" | Measure == "rmsea" | Measure == "tli" | Measure == "cfi")
#################################################################
##                Plotting confirmatory network                ##
#################################################################
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_us,"gad"),
"PHQ-9" = def_legend(networkdata_us,"phq"),
"SMPD" = def_legend(networkdata_us,"smpd"),
"SMSAD" = def_legend(networkdata_us,"smsp"),
"DOCS" = def_legend(networkdata_us,"docs"),
"TPESS" = c(which(colnames(networkdata_us) == "tpess")))
# importing nodelabels
nodelabels <- read.csv("./data/nodelabels.csv")
# pulling plot layout of exploratory network
plotlayout <- as.matrix(read.csv("./data/confirmatory/plotlayout.csv"))
#plotting confirmatory network
plot_us <- qgraph(getmatrix(results_cfmnetwork, "omega", threshold = TRUE, alpha = 0.05),
groups = group_subscale,
layout = plotlayout,
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "study1_cfmnetwork", filetype = "jpeg", width = 20, height = 20,
theme = "colorblind")
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig$weight <- round(cfmnetwork_edgelist_sig$weight, digits = 2)
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig_table <- cfmnetwork_edgelist_sig %>%
flextable() %>%
set_header_labels(label = "Node Label",
variable_description_short = "Description",
weight = "Edge Weight") %>%
autofit()
print(cfmnetwork_edgelist_sig_table, preview = "docx")
source("~/GitHub/TPESS-Network-S1/scripts/analysis_cfmnet.R")
source("~/GitHub/TPESS-Network-S1/scripts/analysis_cfmnet.R")
