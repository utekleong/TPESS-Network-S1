nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, variable_description_short, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, variable_description_short, ip)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
nonparboot_ip
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, variable_description_short, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, variable_description_short, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
nonparboot_ip
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
typeof(nonparboot_ip)
typeof(nonparboot_ip$ip)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
typeof(nonparboot_ip)
typeof(nonparboot_ip$ip)
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6" & label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6" & label == "D7" & label == "D9" & label == "A7"& label == "S3"& label == "O3")
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip <- filter(nonparboot_ip, label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2)
nonparboot_ip
View(nonparboot_ip)
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
nonparboot_ip
View(nonparboot_ip)
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
# importing clean data for reliability analyses
networkdata_reliability_sg <- read.csv("./data/exploratory/networkdata_reliability_sg.csv")
# importing clean data for sample characteristics and network estimation
data_sg <- read.csv("./data/exploratory/networkdata_sg.csv")
networkdata_sg <- read.csv("./data/exploratory/networkdata_sg.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
#################################################################
##                         Reliability                         ##
#################################################################
#calculating reliability for docs subscales (raw_alpha of output)
## docs_con
networkdata_reliability_sg %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
networkdata_reliability_sg %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
networkdata_reliability_sg %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
networkdata_reliability_sg %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
#calculating reliability for tpess (raw_alpha of output)
networkdata_reliability_sg %>%
select(starts_with("tpess")) %>%
psych::alpha()
##################################################################
##                    Sample characteristics                    ##
##################################################################
# mean age
mean(data_sg$Age, na.rm = TRUE) %>%
round(digits = 2)
##################################################################
##                Exploratory network estimation                ##
##################################################################
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_sg)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
# write.csv(nodelabels, file = "./data/nodelabels.csv", row.names = FALSE)
# estimating network
network_sg <- estimateNetwork(networkdata_sg,
default = "EBICglasso",
corMethod = "spearman",
labels = nodelabels$label,
missing = "pairwise",
sampleSize = "pairwise_average",
tuning = 0.5)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_sg,"gad"),
"PHQ-9" = def_legend(networkdata_sg,"phq"),
"SMPD" = def_legend(networkdata_sg,"smpd"),
"SMSAD" = def_legend(networkdata_sg,"smsp"),
"DOCS" = def_legend(networkdata_sg,"docs"),
"TPESS" = c(which(colnames(networkdata_sg) == "tpess")))
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "expnetwork", filetype = "jpeg", width = 20, height = 20)
# extracting adjacency matrix from the exploratory network to be used in confirmatory network analysis
adjmatrix <- 1*(network_sg$graph !=0)
# write.csv(adjmatrix, file = "./data/confirmatory/adjmatrix.csv", row.names = TRUE)
# extracting plot layout from the exploratory network to be used in confirmatory network analysis
plotlayout <- plot_sg$layout
# write.csv(plotlayout, file = "./data/confirmatory/plotlayout.csv", row.names = FALSE)
##################################################################
##                      Edge weight tables                      ##
##################################################################
# Edge Weight Table (Full)
edgeweight_full <- data.frame(network_sg$graph) %>%
round(digits = 2)
row.names(edgeweight_full) <- nodelabels$label
names(edgeweight_full) <- nodelabels$label
# extracting edge weights (TPESS-Symptoms only)
edgeweight_tpess <- data.frame(network_sg$graph[,41]) %>%
round(digits = 2) %>%
rownames_to_column()
names(edgeweight_tpess) <- c("variablename", "weight")
edgeweight_tpess <- left_join(edgeweight_tpess, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
#nonparboot <- bootnet(network_sg, nBoots = 1000, nCores = 8)
#saveRDS(nonparboot, file = "./data/exploratory/rds/nonparboot.rds")
nonparboot <- readRDS(file = "./data/exploratory/rds/nonparboot.rds")
# extracting bootstrapped CIs
nonparboot_ci <- summary(nonparboot) %>%
filter(type == "edge", node2 == "T", (node1 == "D6"|node1 == "D7"|node1 == "D9"|node1 == "A7"|node1 == "S3"|node1 == "O3")) %>%
ungroup() %>%
select(node1, CIlower, CIupper)
nonparboot_ci$CIlower <- round(nonparboot_ci$CIlower, digits = 2)
nonparboot_ci$CIupper <- round(nonparboot_ci$CIupper, digits = 2)
nonparboot_ci <- mutate(nonparboot_ci, CI = paste0("[",CIlower,",",CIupper,"]"), .keep = "unused")
names(nonparboot_ci) <- c("label", "CI")
nonparboot_ci
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_inclusionprop$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(nonparboot_ip, label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
nonparboot_ip
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(nonparboot_ip, label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6", label == "D7", label == "D9", label == "A7", label == "S3", label == "O3")
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == D6)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
View(nonparboot_ip)
nonparboot_ip_test <- filter(nonparboot_ip, label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip_test
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
nonparboot_ip
View(nonparboot_ip)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
round(digits = 2) %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip)
nonparboot_ip
# extracting inclusion proportions
nonparboot_ip <- bootInclude(nonparboot)
nonparboot_ip<- nonparboot_ip$graph %>% data.frame() %>%
select(tpess) %>%
rownames_to_column()
names(nonparboot_ip) <- c("variablename", "ip")
nonparboot_ip <- left_join(nonparboot_ip, nodelabels, by = "variablename") %>%
select(label, ip) %>%
filter(label == "D6"|label == "D7"|label == "D9"|label == "A7"|label == "S3"|label == "O3")
nonparboot_ip
# edge weights (TPESS-Symptoms only)) + bootstrapped CI + inclusion proportion
edgeweight_tpess_table <- left_join(edgeweight_tpess, nonparboot_ci) %>%
left_join(nonparboot_ip)
edgeweight_tpess_table
# edge weights (TPESS-Symptoms only)) + bootstrapped CI + inclusion proportion
edgeweight_tpess_table <- left_join(edgeweight_tpess, nonparboot_ci) %>%
left_join(nonparboot_ip) %>%
arrange(desc(weight))
edgeweight_tpess_table
source("~/GitHub/TPESS-Network-S1/scripts/analysis_expnet.R")
source("~/GitHub/TPESS-Network-S1/scripts/analysis_expnet.R")
print(edgeweight_tpess_table, preview = "docx")
View(nonparboot)
summary(nonparboot)
test <- summary(nonparboot)
test <- summary(nonparboot) %>% filter(node2 == "T")
test <- summary(nonparboot) %>% filter(node2 == "T") %>% select(prop0)
source("~/GitHub/TPESS-Network-S1/scripts/analysis_expnet.R")
#################################################################
##                            Setup                            ##
#################################################################
set.seed(2022)
# loading packages
library(haven)
library(psych)
library(bootnet)
library(tidyverse)
library(flextable)
library(qgraph)
library(psychonetrics)
# importing clean data for reliability analyses
networkdata_reliability_us <- read.csv("./data/confirmatory/networkdata_reliability_us.csv")
# importing clean data for sample characteristics and network estimation
data_us <- read.csv("./data/confirmatory/networkdata_us.csv")
networkdata_us <- read.csv("./data/confirmatory/networkdata_us.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("./data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
#################################################################
##                         Reliability                         ##
#################################################################
#calculating reliability for docs subscales (raw_alpha of output)
## docs_con
networkdata_reliability_us %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
networkdata_reliability_us %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
networkdata_reliability_us %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
networkdata_reliability_us %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
#calculating reliability for tpess (raw_alpha of output)
networkdata_reliability_us %>%
select(starts_with("tpess")) %>%
psych::alpha()
##################################################################
##                    Sample characteristics                    ##
##################################################################
# mean age
mean(data_us$Age, na.rm = TRUE) %>%
round(digits = 2)
#################################################################
##               Confirmatory network estimation               ##
#################################################################
# pulling adjacency matrix from exploratory network
adjmatrix <- as.matrix(read.csv("./data/confirmatory/adjmatrix.csv", row.names = 1))
# obtaining average pairwise sample size for US sample
noNA <- !is.na(networkdata_us)
noNAmat <- t(noNA) %*% noNA
n_pairwise <- mean(noNAmat[lower.tri(noNAmat)])
# fitting confirmatory network model with psychonetrics
# since exploratory model used spearman, should use spearman in confirmatory model for consistency (supply covs and nobs arguments instead of data)
# computationally intensive; code below was saved to a .rds file, to be loaded with readRDS
cfmnetwork <- ggm(covs = cor(networkdata_us, use = "pairwise.complete.obs", method = "spearman"),
nobs = n_pairwise,
omega = adjmatrix)
results_cfmnetwork <- cfmnetwork %>% runmodel()
saveRDS(results_cfmnetwork, file = "./data/confirmatory/rds/results_cfmnetwork.rds")
source("~/GitHub/TPESS-Network-S1/scripts/analysis_cfmnet.R")
