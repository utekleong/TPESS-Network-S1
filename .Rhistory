#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
dev.off
dev.off()
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
View(group_subscale)
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
par(mar = c(0.1, 0.1, 0.1, 0.1))
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_fsnet.R")
# printing plot
plot_fs <- plot(networkdata_sg_fs,
groups = group_subscale,
#layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "fsnetwork", filetype = "png", width = 20, height = 20)
nodelabels$label
source("~/Github/TPESS-Network-S1/scripts/analysis_cfmnet.R")
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend = FALSE
legend.cex = 0.95,
# printing plot
plot_sg <- plot(network_sg,
groups = group_subscale,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend = FALSE,
legend.cex = 0.95,
nodeNames = nodelabels$variable_description_short,
filename = "expnetwork", filetype = "png", width = 20, height = 20)
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
Y
"Y"
tinytex::install_tinytex()
y
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
View(nodelabels)
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(nodenames[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(communities_labels[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
x <- c()
for (i in 1:length(communities_labels[57:66])) {
x <- append(x, values = "TPESS")
}
# creating communities
communities_labels <- read.csv("../data/nodelabels.csv") %>%
select(variablename)
communities_clean <- gsub('[[:digit:]]+', '', communities_labels)
communities_clean[57:66] <- x
communities_clean
install.packages("networktools")
install.packages("networktools")
source("~/Github/TPESS-Network-S1/scripts/analysis_expnet.R")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(bootnet)
library(kableExtra)
library(haven)
library(psych)
library(qgraph)
library(psychonetrics)
library(lavaan)
library(networktools)
variables <- as.data.frame(readxl::read_xlsx("../data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
networkdata_allitems_sg <- read.csv("../data/exploratory/networkdata_allitems_sg.csv")
# defining node labels for graph
nodelabels_57 <- data.frame(variablename = colnames(networkdata_allitems_sg)) %>%
left_join(variables, by = "variablename") %>%
select(label)
#estimating network
network_57 <- estimateNetwork(networkdata_allitems_sg,
default = "EBICglasso",
corMethod = "spearman",
labels = nodelabels_57$label,
missing = "pairwise",
sampleSize = "pairwise_average",
tuning = 0.5)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale_57 <- list("GAD" = def_legend(networkdata_allitems_sg,"gad"),
"PHQ-9" = def_legend(networkdata_allitems_sg,"phq"),
"SMPD" = def_legend(networkdata_allitems_sg,"smpd"),
"SMSAD" = def_legend(networkdata_allitems_sg,"smsp"),
"DOCS" = def_legend(networkdata_allitems_sg,"docs"),
"TPESS" = c(which(colnames(networkdata_allitems_sg) == "tpess")))
# printing plot
plot_57 <- plot(network_57,
groups = group_subscale_57,
layout = "spring",
cut = 0,
palette = "pastel",
vsize = 4,
labels = nodelabels_57$label,
label.cex = 1.35,
border.width = 0.75,
legend.cex = 0.5)
data.frame(variablename = colnames(networkdata_allitems_sg)) %>%
left_join(variables, by = "variablename") %>%
select(label, variable_description_short) %>% kbl(format = "latex", col.names = c("Node Label", "Description"), caption = "Item content for 57-node network", booktabs = TRUE, longtable = TRUE)  %>%
pack_rows("GAD-7", 1, 7) %>%
pack_rows("PHQ-9", 8, 16) %>%
pack_rows("SMPD", 17, 26) %>%
pack_rows("SMSAD", 27, 36) %>%
pack_rows("DOCS", 37, 56) %>%
pack_rows("TPESS", 57, 57) %>%
column_spec(1, width = "10em") %>%
column_spec(2, width = "30em") %>%
footnote(
general_title = "Note.",
general = "GAD-7 = Generalized Anxiety Disorder-7; PHQ-9 = Patient Health Questionnaire-9; SMPD = Severity Measure for Panic Disorder-Adult; SMSAD = Severity Measure for Social Anxiety Disorder-Adult; DOCS = Dimensional Obsessive-Compulsive Scale; TPESS = Transdiagnostic Processes of Emotional Symptoms Scale; Item descriptions for PHQ-9, GAD-7, and DOCS adapted from Hsu et al. (2022), Mossman et al. (2017), and Abramowitz et al. (2010) respectively.",
threeparttable = TRUE,
footnote_as_chunk = TRUE)
networkdata_sg <- read.csv("../data/exploratory/networkdata_sg.csv")
phq <- networkdata_sg[which(colnames(networkdata_sg) == "phq1"):which(colnames(networkdata_sg) == "phq9")] %>%
pivot_longer(names_to = "item",
values_to = "response",
cols = everything()) %>%
left_join(variables, by = c("item" = "variablename"))
ggplot(phq, aes(x = response, y = variable_description_short)) +
geom_count(aes(size = after_stat(prop)), na.rm = TRUE) +
scale_size_area(max_size = 10) +
labs(x = "Response", y = "Item") +
theme_light() +
theme(legend.position = "none", axis.title.y = element_blank())
gad <- networkdata_sg[which(colnames(networkdata_sg) == "gad1"):which(colnames(networkdata_sg) == "gad7")] %>%
pivot_longer(names_to = "item",
values_to = "response",
cols = everything()) %>%
left_join(variables, by = c("item" = "variablename"))
ggplot(gad, aes(x = response, y = variable_description_short)) +
geom_count(aes(size = after_stat(prop)), na.rm = TRUE) +
scale_size_area(max_size = 10) +
labs(x = "Response", y = "Item") +
theme_light() +
theme(legend.position = "none", axis.title.y = element_blank())
smpd <- networkdata_sg[which(colnames(networkdata_sg) == "smpd1"):which(colnames(networkdata_sg) == "smpd10")] %>%
pivot_longer(names_to = "item",
values_to = "response",
cols = everything()) %>%
left_join(variables, by = c("item" = "variablename"))
ggplot(smpd, aes(x = response, y = variable_description_short)) +
geom_count(aes(size = after_stat(prop)), na.rm = TRUE) +
scale_size_area(max_size = 10) +
labs(x = "Response", y = "Item") +
theme_light() +
theme(legend.position = "none", axis.title.y = element_blank())
smsad <- networkdata_sg[which(colnames(networkdata_sg) == "smsp1"):which(colnames(networkdata_sg) == "smsp10")] %>%
pivot_longer(names_to = "item",
values_to = "response",
cols = everything()) %>%
left_join(variables, by = c("item" = "variablename"))
ggplot(smsad, aes(x = response, y = variable_description_short)) +
geom_count(aes(size = after_stat(prop)), na.rm = TRUE) +
scale_size_area(max_size = 10) +
labs(x = "Response", y = "Item") +
theme_light() +
theme(legend.position = "none", axis.title.y = element_blank())
# generating non-parametric bootstraps samples of network_sg
# bootstraps of network_sg (see analysis_expnet.R) computationally intensive to execute so output was saved to a .rds file. Data to be loaded with readRDS
nonparboot <- readRDS(file = "../data/exploratory/rds/nonparboot.rds")
#plotting bootstrapped CIs for edge weights
plot(nonparboot, order = "sample", labels = FALSE, areaAlpha = 0.4)
# creating communities
communities <- list("gad"= c(1:7),
"phq9" = c(8:16),
"smpd" = c(17:26),
"smsp" = c(27:36),
"docs" = c(37:40),
"tpess" = c(41))
#loading exploratory network plot data
plot_sg <- readRDS("../data/appendix/rds/plot_sg.rds")
#computing bridge centrality
bridgecen_sg <- bridge(plot_sg,communities = communities)
plot_bridgecen_sg <- plot(bridgecen_sg, include = c("Bridge Strength")) +
theme(axis.text=element_text(size = 6))
print(plot_bridgecen_sg)
# performing case-drop bootstraps for exploratory network
boot_sg <- readRDS("../data/appendix/rds/boot_sg.rds")
#casedropboot <- bootnet(boot_sg, nBoots = 1000, nCores = 8, statistics = "all", communities = communities, type = "case")
#saveRDS(casedropboot, "../data/appendix/rds/casedropboot.rds")
casedropboot <- readRDS("../data/appendix/rds/casedropboot.rds")
# assessing stability of bridge strength using case-drop bootstrap statistics
corStability(casedropboot, statistics = c("bridgeStrength"))
plot(casedropboot, statistics= c("bridgeStrength"))
set.seed(2022)
# importing clean data for reliability analyses
networkdata_reliability_us <- read.csv("../data/confirmatory/networkdata_reliability_us.csv")
# importing clean data for sample characteristics and network estimation
data_us <- read.csv("../data/confirmatory/networkdata_us.csv")
networkdata_us <- read.csv("../data/confirmatory/networkdata_us.csv") %>%
select(-Age)
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("../data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
#calculating reliability for docs subscales (raw_alpha of output)
#calculating reliability for tpess (raw_alpha of output)
docs_tpess_reli <-networkdata_reliability_us %>%
select(starts_with("tpess")) %>%
psych::alpha()
## docs_con
docs_con_reli <- networkdata_reliability_us %>%
select(docs1, docs2, docs3, docs4, docs5) %>%
psych::alpha()
## docs_res
docs_res_reli <- networkdata_reliability_us %>%
select(docs6, docs7, docs8, docs9, docs10) %>%
psych::alpha()
## docs_ut
docs_ut_reli <- networkdata_reliability_us %>%
select(docs11, docs12, docs13, docs14, docs15) %>%
psych::alpha()
## docs_sym
docs_sym_reli <- networkdata_reliability_us %>%
select(docs16, docs17, docs18, docs19, docs20) %>%
psych::alpha()
# pulling adjacency matrix from exploratory network
adjmatrix <- as.matrix(read.csv("../data/confirmatory/adjmatrix.csv", row.names = 1))
# obtaining average pairwise sample size for US sample
noNA <- !is.na(networkdata_us)
noNAmat <- t(noNA) %*% noNA
n_pairwise <- mean(noNAmat[lower.tri(noNAmat)])
# fitting confirmatory network model with psychonetrics
# since exploratory model used spearman, should use spearman in confirmatory model for consistency (supply covs and nobs arguments instead of data)
# computationally intensive; code below was saved to a .rds file, to be loaded with readRDS
cfmnetwork <- ggm(covs = cor(networkdata_us, use = "pairwise.complete.obs", method = "spearman"),
nobs = n_pairwise,
omega = adjmatrix)
#results_cfmnetwork <- cfmnetwork %>% runmodel()
#saveRDS(results_cfmnetwork, file = "../data/confirmatory/rds/results_cfmnetwork.rds")
results_cfmnetwork <- readRDS(file = "../data/confirmatory/rds/results_cfmnetwork.rds")
# obtaining model fit indices
fit_cfmnetwork <- results_cfmnetwork %>% fit %>%
filter(Measure == "df" |Measure == "chisq" | Measure == "rmsea" | Measure == "tli" | Measure == "cfi")
fit_cfmnetwork$Value <- round(fit_cfmnetwork$Value, digits = 2)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_us,"gad"),
"PHQ-9" = def_legend(networkdata_us,"phq"),
"SMPD" = def_legend(networkdata_us,"smpd"),
"SMSAD" = def_legend(networkdata_us,"smsp"),
"DOCS" = def_legend(networkdata_us,"docs"),
"TPESS" = c(which(colnames(networkdata_us) == "tpess")))
# importing nodelabels
nodelabels <- read.csv("../data/nodelabels.csv")
# pulling plot layout of exploratory network
plotlayout <- as.matrix(read.csv("../data/confirmatory/plotlayout.csv"))
#plotting confirmatory network
plot_us <- qgraph(getmatrix(results_cfmnetwork, "omega", threshold = TRUE, alpha = 0.05),
groups = group_subscale,
layout = plotlayout,
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 1.42,
nodeNames = nodelabels$variable_description_short,
#filename = "cfmnetwork", filetype = "jpeg", width = 20, height = 20,
theme = "colorblind")
# extracing significance values from CIplot
cfmnetwork_ciplot <- CIplot(results_cfmnetwork, "omega")
significance <- case_when(
cfmnetwork_ciplot$data$p < 0.0001 ~ "p < .0001",
cfmnetwork_ciplot$data$p < 0.001 ~ "p < .001",
cfmnetwork_ciplot$data$p < 0.01 ~ "p < .01",
cfmnetwork_ciplot$data$p < 0.05 ~ "p < .05",
cfmnetwork_ciplot$data$p > 0.05 ~ "p > .05"
)
# this chunk of code pulls the edgelist from ci plot and removes absent edges
cfmnetwork_edgelist <- data.frame(edge = as.character(cfmnetwork_ciplot$data$edge),
weight = cfmnetwork_ciplot$data$est,
p = cfmnetwork_ciplot$data$p,
sig = significance) %>%
filter(edge %in% subset(cfmnetwork_ciplot$data$edge, grepl("tpess", cfmnetwork_ciplot$data$edge, fixed = TRUE))) %>%  #grep1 used to filter for tpess-relevant edges only (returns T/F), subset used to create list of tpess-x edgelist; %in% used to evaluate if edge is in the tpess-x edgelist (returns T/F)
filter(!is.na(weight) & !is.na(p))
# this chunk of code subsets the edgelist to significant edges only
cfmnetwork_edgelist_sig <- cfmnetwork_edgelist %>%
filter(sig != "p > .05")
# creating a nice table for significant edges of confirmatory network
cfmnetwork_edgelist_sig$edge <- c("gad2", "gad6", "phq1", "phq6", "smsp3", "docs_ut", "docs_sym")
names(cfmnetwork_edgelist_sig) <- c("variablename", "weight", "p", "sig")
cfmnetwork_edgelist_sig$weight <- round(cfmnetwork_edgelist_sig$weight, digits = 2)
cfmnetwork_edgelist_sig <- left_join(cfmnetwork_edgelist_sig, nodelabels, by = "variablename") %>%
select(label, variable_description_short, weight) %>%
arrange(desc(weight))
cfmnetwork_edgelist_sig %>%
kbl(format = "latex", col.names = c("Node Label", "Description", "Edge Weight"), caption = "Confirmatory Network: Weights of Edges between the Core Vulnerability and Internalizing Symptoms", booktabs = TRUE, longtable = TRUE)  %>%
footnote(
general_title = "Note.",
general = "All edges included in this are significant at p < .05. Values in the edge weight column indicate the partial spearman correlation between the core vulnerability node and the corresponding symptom node.",
threeparttable = TRUE,
footnote_as_chunk = TRUE)
# importing factor scores
tpess_factorscores <- read_sav("../data/fsnetwork/fscores.sav") %>%
select(1)
names(tpess_factorscores) <- "tpess_fs"
# importing clean data for network estimation
networkdata_sg_fs <- read.csv("../data/exploratory/networkdata_allitems_sg.csv")
# importing codebook
variables <- as.data.frame(readxl::read_xlsx("../data/variablebook.xlsx")) %>%
select("label", "variablename", "variable_description_short", "variable_description_clean")
##################################################################
##          Computing factor scores for DOCS subscales          ##
##################################################################
# subsetting DOCS data
docs_data <- networkdata_sg_fs %>%
select(starts_with("docs"))
# specifying and estimating CFA model
docs_structure <-"
docs_con =~ docs1 + docs2 + docs3 + docs4 + docs5
docs_res =~ docs6 + docs7 + docs8 + docs9 + docs10
docs_ut =~ docs11 + docs12 + docs13 + docs14 + docs15
docs_sym =~ docs16 + docs17 + docs18 + docs19 + docs20
# Second-order factor
docs_general =~ docs_con + docs_res + docs_ut + docs_sym
"
docs_model <- cfa(docs_structure, docs_data, missing = "ml")
summary(docs_model, fit.measures = TRUE)
# extracting factor scores
docs_factorscores <- as.data.frame(lavPredict(docs_model, method = "regression")) %>%
select(-docs_general)
##################################################################
##                Exploratory network estimation                ##
##################################################################
# merging factor scores with rest of the data
networkdata_sg_fs <- networkdata_sg_fs %>%
select(-tpess, -starts_with("docs")) %>%
cbind(docs_factorscores) %>%
cbind(tpess_factorscores)
# defining node labels for graph
nodelabels <- data.frame(variablename = colnames(networkdata_sg_fs)) %>%
left_join(variables, by = "variablename") %>%
select(-variable_description_clean)
nodelabels[nodelabels$variablename == "tpess_fs",2] <- "T"
nodelabels[nodelabels$variablename == "tpess_fs",3] <- "TPESS factor score"
nodelabels[nodelabels$variablename == "docs_con",3] <- "Contamination factor score"
nodelabels[nodelabels$variablename == "docs_res",3] <- "Responsibility factor score"
nodelabels[nodelabels$variablename == "docs_ut",3] <- "Unacceptable Thoughts factor score"
nodelabels[nodelabels$variablename == "docs_sym",3] <- "Symmetry factor score"
# estimating network
network_fs <- estimateNetwork(networkdata_sg_fs,
default = "EBICglasso",
corMethod = "spearman",
labels = nodelabels$label,
missing = "pairwise",
sampleSize = "pairwise_average",
tuning = 0.5)
# custom function for defining legend vectors
# DO NOT use if there is only one element
# var_start argument should be argument for dplyr::starts_with
def_legend <- function(data, var_start){
data %>%
select(starts_with(var_start)) %>%
colnames() %>%
match(colnames(data))
}
# defining grouping for legend
group_subscale <- list("GAD" = def_legend(networkdata_sg_fs,"gad"),
"PHQ-9" = def_legend(networkdata_sg_fs,"phq"),
"SMPD" = def_legend(networkdata_sg_fs,"smpd"),
"SMSAD" = def_legend(networkdata_sg_fs,"smsp"),
"DOCS" = def_legend(networkdata_sg_fs,"docs"),
"TPESS" = c(which(colnames(networkdata_sg_fs) == "tpess_fs")))
# importing plot layout from original exploratory network for ease of comparison
plotlayout <- as.matrix(read.csv("../data/confirmatory/plotlayout.csv"))
# printing plot
plot_fs <- plot(network_fs,
groups = group_subscale,
layout = plotlayout, #layout constrained to that of original exploratory network for ease of comparison
cut = 0,
palette = "pastel",
vsize = 3,
labels = nodelabels$label,
label.cex = 1.5,
border.width = 0.75,
legend.cex = 1.42,
nodeNames = nodelabels$variable_description_short)
# weight matrices
weightmatrix_main <- as.matrix(read.csv("../data/fsnetwork/weightmatrix.csv"))
weightmatrix_factorscore <- network_fs$graph
#edge weights
edgeweight_main <- weightmatrix_main[lower.tri(weightmatrix_main)]
edgeweight_factorscore <- weightmatrix_factorscore[lower.tri(weightmatrix_factorscore)]
cor_edgeweight <- cor(edgeweight_main, edgeweight_factorscore)
plot(edgeweight_main, edgeweight_factorscore, ylab = "Edge Weights (Factor Score Network)", xlab = "Edge Weights (Original Network)")
edgeweight_main
weightmatrix_main
edgeweight_main
edgeweight_main
weightmatrix_main
edgeweight_main
